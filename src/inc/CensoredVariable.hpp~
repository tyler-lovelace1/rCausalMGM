/*
 * Represents a right censored variable with a real value and a censoring indicator. 
 * The values are doubles, and the default missing value marker for is 
 * numeric_limits<double>::quiet_NaN(). The censoring indicator is boolean value, 
 * false when the value is censored and true when uncensored.
 *
 * @author Tyler Lovelace conversion to C++ 7/21
 */

#ifndef CENSOREDVARIABLE_HPP_
#define CENSOREDVARIABLE_HPP_

// class Node;

#include "Variable.hpp"
// #include "CoxIRLSRegression.hpp"
// #include "CoxRegressionResult.hpp"
// #include "Node.hpp"
#include <cmath>
#include <limits>
#include <exception>
#include <iostream>

class CensoredVariable : public Variable {
private:
    const double MISSING_VALUE = std::numeric_limits<double>::quiet_NaN();
    const std::string MISSING_VALUE_STRING = "NaN";
    uint n;
    uint unique;
    uint nEvents;
    arma::uvec order;
    arma::uvec censor;
    arma::uvec H;
    arma::uvec CC;
    arma::vec WZ;
    std::vector<std::string> neighbors;
    // CoxIRLSRegression coxRegression;
    // CoxRegressionResult coxResult;

public:
    CensoredVariable(const std::string& name) {
	this->name = name;
	this->type = CENSORED;
    }

    CensoredVariable(Variable* var) {
	if (var->getType() == CENSORED) {
	    name = ((CensoredVariable*) var)->name;
	    type = ((CensoredVariable*) var)->type;
	    n = ((CensoredVariable*) var)->n;
	    unique = ((CensoredVariable*) var)->unique;
	    nEvents = ((CensoredVariable*) var)->nEvents;
	    order = arma::uvec(((CensoredVariable*) var)->order);
	    censor = arma::uvec(((CensoredVariable*) var)->censor);
	    H = arma::uvec(((CensoredVariable*) var)->H);
	    CC = arma::uvec(((CensoredVariable*) var)->CC);
	    WZ = arma::vec(((CensoredVariable*) var)->WZ);
	    neighbors = ((CensoredVariable*) var)->neighbors;
	} else {
	    throw std::runtime_error("Trying to construct censored variable from a variable of a different type");
	}
    }

    CensoredVariable(CensoredVariable* var) {
	name = var->name;
	type = var->type;
	n = var->n;
	unique = var->unique;
	nEvents = var->nEvents;
	order = arma::uvec(var->order);
	censor = arma::uvec(var->censor);
	H = arma::uvec(var->H);
	CC = arma::uvec(var->CC);
	WZ = arma::vec(var->WZ);
	neighbors = var->neighbors;
    }

    CensoredVariable(const CensoredVariable& var) {
	name = var.name;
	type = var.type;
	n = var.n;
	unique = var.unique;
	nEvents = var.nEvents;
	order = arma::uvec(var.order);
	censor = arma::uvec(var.censor);
	H = arma::uvec(var.H);
	CC = arma::uvec(var.CC);
	WZ = arma::vec(var.WZ);
	neighbors = var.neighbors;
    }
  
    ~CensoredVariable() {}

    double getMissingValueMarker() { return this->MISSING_VALUE; }

    bool setCensor(arma::vec& values, arma::uvec& censor);
  
    bool setCensor(arma::vec&& values, arma::uvec&& censor);

    arma::uvec getOrder() { return this->order; }

    arma::uword getOrder(int i) { return this->order[i]; }

    arma::uvec getCensor() { return this->censor; }

    arma::uword getCensor(int i) { return this->censor[i]; }

    arma::uvec getH() { return this->H; }

    arma::uword getH(int i) { return this->H[i]; }

    arma::uvec getCC() { return this->CC; }

    arma::uword getCC(int i) { return this->CC[i]; }

    arma::uword getNEvents() { return nEvents; }

    // void resetCoxModel(CoxIRLSRegression& coxRegression) { this->coxRegression = coxRegression; }

    void setNeighbors(std::vector<std::string>& neighbors) { this->neighbors = neighbors; }
    
    std::vector<std::string> getNeighbors() { return neighbors; }
    
    void setWZ(arma::vec& WZ) { this->WZ = WZ; }
    
    arma::vec getWZ() { return WZ; }

    bool isMissingValue(const double& val) { return std::isnan(val); }

    bool isMissingValue(const std::string& val) { return val==MISSING_VALUE_STRING; }

    // bool checkValue(const double& val) { return true; }

    bool checkValue(const std::string& val);
  
    CensoredVariable* like(const std::string& name) { return new CensoredVariable(name); }

    friend void test_censored(const std::string& name, arma::vec& values, arma::uvec& censor);
    friend std::ostream& operator<<(std::ostream& os, CensoredVariable& cv);
};

#endif /* CENSOREDVARIABLE_HPP_ */
