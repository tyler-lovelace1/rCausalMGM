#ifndef BLOCKINGQUEUE_HPP_
#define BLOCKINGQUEUE_HPP_

#include <mutex>
#include <condition_variable>
#include <list>
// #include <boost/circular_buffer.hpp>

/**
 * A fixed capacity, thread stable queue used to store
 * tasks in a producer/consumer setup
 */ 
template <typename T>
class BlockingQueue {

private:

    int capacity;

    std::mutex head;
    std::mutex tail;

    std::condition_variable freeHead;
    std::condition_variable freeTail;

    std::list<T> queue;

public:
    BlockingQueue(int _capacity) {
        capacity = _capacity;
        queue = std::list<T>(capacity);
    }

    void push(const T& t);
    T pop();

    int getCapacity() {return capacity;}

    // TODO - lock?
    int getSize() {return queue.size();}
    bool isEmpty() {return queue.empty();}

};

#endif /* BLOCKINGQUEUE_HPP_ */
